<?xml version="1.0" encoding="utf-8"?><feed xmlns="http://www.w3.org/2005/Atom" ><generator uri="https://jekyllrb.com/" version="3.7.3">Jekyll</generator><link href="http://github.com/oshanz/til/til/feed.xml" rel="self" type="application/atom+xml" /><link href="http://github.com/oshanz/til/til/" rel="alternate" type="text/html" /><updated>2018-07-24T19:05:39+05:30</updated><id>http://github.com/oshanz/til/til/</id><title type="html">TIL</title><subtitle>Write an awesome description for your new site here. You can edit this line in _config.yml. It will appear in your document head meta (for Google search results) and in your feed.xml site description.</subtitle><entry><title type="html">Leading with questions</title><link href="http://github.com/oshanz/til/til/2018/07/19/leading-with-questions.html" rel="alternate" type="text/html" title="Leading with questions" /><published>2018-07-19T00:00:00+05:30</published><updated>2018-07-19T00:00:00+05:30</updated><id>http://github.com/oshanz/til/til/2018/07/19/leading%20with%20questions</id><content type="html" xml:base="http://github.com/oshanz/til/til/2018/07/19/leading-with-questions.html">&lt;p&gt;Open-ended Questions&lt;/p&gt;

&lt;p&gt;• Clarifying: improving the clarity of a message or statement; encouraging more elaboration – “How exactly would you like this done?”
• Reflective: challenging basic assumptions – “Why do we always do it this way?” “Has this ever been tried?”
• Probing: Getting more details; going deeper – “Can you elaborate on why this is happening?”
• Creating connections: asking for systems perspectives – “What will be the consequences of this action?”
• Exploratory: opening up new avenues and insights that lead to new explorations – “Have you considered such a source?”
• Analytical: examining cause and effect, not just symptoms – “Why has this happened?”
• Affective: encouraging sharing of feelings – “How do you feel/how excited are you about this strategy?&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;What do you think about ..?&lt;/li&gt;
  &lt;li&gt;What more could you say about .?&lt;/li&gt;
  &lt;li&gt;What might happen if ..?&lt;/li&gt;
  &lt;li&gt;Why do you think it is not feasible to   ?&lt;/li&gt;
  &lt;li&gt;How you intend to resolve this issue  ?&lt;/li&gt;
  &lt;li&gt;When would be the best time to invest in ..?&lt;/li&gt;
  &lt;li&gt;When you say “difficult,” what do you mean?&lt;/li&gt;
  &lt;li&gt;How will you use the information?&lt;/li&gt;
  &lt;li&gt;Where are possibilities have you left out?&lt;/li&gt;
  &lt;li&gt;What are you trying to understand?&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;Closed Questions&lt;/p&gt;

&lt;p&gt;• Limit debate and make decisions – “Is the team ready to make a decision?”
• Find out specific information – “ When is the proposal due?”&lt;/p&gt;

&lt;p&gt;Follow-up Questions&lt;/p&gt;

&lt;p&gt;• Leading Questions – “Isn’t it true ?”
• Multiple-Choice Questions – When the team doesn’t make the proper connection desired by the coach. Feels like an interrogation.
• Judgmental Questions –
– Why did you make mistakes on this issue?
– Can someone help Andrew understand this point?
– Why is the team taking so long to come up with a solution?
• Identify preferences – “Does the team like Plan A or Plan B?”&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;Commitment to ask questions&lt;/li&gt;
  &lt;li&gt;Courage and authenticity&lt;/li&gt;
  &lt;li&gt;Timing for questions&lt;/li&gt;
  &lt;li&gt;Active listening
 • Being able to hear what is said as well as what is not being said
 • Requires astute observation and note- taking to be in touch and in tune with who is saying what, how, when and to whom&lt;/li&gt;
  &lt;li&gt;Strong commitment to learning
 • Belief that learning is critical to improving actions, and that questions are the best way to enable others and self to learn
 • Great leaders are eager to see individuals, groups and organizations learn&lt;/li&gt;
  &lt;li&gt;Positive, supportive attitude toward others
 • Concerned with the well-being of each person
 • Committed to their success
 • Empathetic and supportive
 • See the potential in each person
 • Believe that everyone can change and learn&lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Self-awareness and Self-confidence
 • Questioner is cognizant of his/her strengths and limitations, and the impact of his questions
 • Confident, yet humble when asking questions
 • Willing to learn and change self
 • Can handle rivalries, distrust and anger
 • Recognizes the power and importance of questions&lt;/p&gt;

    &lt;p&gt;The Architecture for Great Questions&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;Linguisticconstructionofthequestion,in order of generating reflection – what, when, where, which, how, why&lt;/li&gt;
  &lt;li&gt;Scopeofthequestion–individual, group, organization, community, nation, global&lt;/li&gt;
  &lt;li&gt;Assumptionswithinquestions–explicit, implicit, altering; e.g., “How would we approach this problem if we were engineers?&lt;/li&gt;
&lt;/ol&gt;</content><author><name></name></author><summary type="html">Open-ended Questions • Clarifying: improving the clarity of a message or statement; encouraging more elaboration – “How exactly would you like this done?” • Reflective: challenging basic assumptions – “Why do we always do it this way?” “Has this ever been tried?” • Probing: Getting more details; going deeper – “Can you elaborate on why this is happening?” • Creating connections: asking for systems perspectives – “What will be the consequences of this action?” • Exploratory: opening up new avenues and insights that lead to new explorations – “Have you considered such a source?” • Analytical: examining cause and effect, not just symptoms – “Why has this happened?” • Affective: encouraging sharing of feelings – “How do you feel/how excited are you about this strategy?</summary></entry><entry><title type="html">Aws Cost Optimization</title><link href="http://github.com/oshanz/til/til/2018/07/18/aws-cost-optimization.html" rel="alternate" type="text/html" title="Aws Cost Optimization" /><published>2018-07-18T00:00:00+05:30</published><updated>2018-07-18T00:00:00+05:30</updated><id>http://github.com/oshanz/til/til/2018/07/18/aws-cost-optimization</id><content type="html" xml:base="http://github.com/oshanz/til/til/2018/07/18/aws-cost-optimization.html">&lt;p&gt;• Cost Explorer – See patterns in AWS spend over time, project future costs, identify areas that need﻿ further inquiry, observe Reserved Instance utilization, observe Reserved Instance coverage, and receive﻿ Reserved Instance recommendations.﻿ 
• AWS Trusted Advisor – Get real-time identification of potential areas for optimization.﻿ 
• AWS Budgets – Set custom budgets that trigger alerts when cost or usage exceed (or are forecasted to﻿ exceed) a budgeted amount. Budgets can be set based on tags and accounts as well as resource types.﻿ 
• Amazon CloudWatch – Collect and track metrics, monitor log files, set alarms, and automatically react﻿ to changes in AWS resources.﻿ 
• AWS CloudTrail – Log, continuously monitor, and retain account activity related to actions across AWS﻿ infrastructure at low cost.﻿ 
• Amazon S3 Analytics – Automated analysis and visualization of Amazon S3 storage patterns to help﻿ you decide when to shift data to a different storage class.﻿ 
• Cost Optimization Monitor – Automatically process detailed billing reports to get granular metrics that﻿ can be searched, analyzed, and visualized in a customizable dashboard.﻿ 
• EC2 Right Sizing – Analyze EC2 instance utilization data and receive reporting recommendations for﻿ right sizing EC2 instances. The tool recommends instances that better match your usage.﻿ 
• AWS Cost and Usage Report – Granular raw data files detailing your hourly AWS usage across accounts﻿ used for Do-It-Yourself (DIY) analysis (e.g., determining which S3 bucket is driving data transfer spend).﻿ The AWS Cost and Usage Report has dynamic columns that populate depending on the services you﻿ use.﻿ 
• Detailed Billing Report – This report is similar to the AWS Cost and Usage Report, but it has static﻿ columns. This report is eventually deprecated. We recommend that you use the AWS Cost and Usage﻿ Report instead.﻿ 11&lt;/p&gt;</content><author><name></name></author><summary type="html">• Cost Explorer – See patterns in AWS spend over time, project future costs, identify areas that need﻿ further inquiry, observe Reserved Instance utilization, observe Reserved Instance coverage, and receive﻿ Reserved Instance recommendations.﻿ • AWS Trusted Advisor – Get real-time identification of potential areas for optimization.﻿ • AWS Budgets – Set custom budgets that trigger alerts when cost or usage exceed (or are forecasted to﻿ exceed) a budgeted amount. Budgets can be set based on tags and accounts as well as resource types.﻿ • Amazon CloudWatch – Collect and track metrics, monitor log files, set alarms, and automatically react﻿ to changes in AWS resources.﻿ • AWS CloudTrail – Log, continuously monitor, and retain account activity related to actions across AWS﻿ infrastructure at low cost.﻿ • Amazon S3 Analytics – Automated analysis and visualization of Amazon S3 storage patterns to help﻿ you decide when to shift data to a different storage class.﻿ • Cost Optimization Monitor – Automatically process detailed billing reports to get granular metrics that﻿ can be searched, analyzed, and visualized in a customizable dashboard.﻿ • EC2 Right Sizing – Analyze EC2 instance utilization data and receive reporting recommendations for﻿ right sizing EC2 instances. The tool recommends instances that better match your usage.﻿ • AWS Cost and Usage Report – Granular raw data files detailing your hourly AWS usage across accounts﻿ used for Do-It-Yourself (DIY) analysis (e.g., determining which S3 bucket is driving data transfer spend).﻿ The AWS Cost and Usage Report has dynamic columns that populate depending on the services you﻿ use.﻿ • Detailed Billing Report – This report is similar to the AWS Cost and Usage Report, but it has static﻿ columns. This report is eventually deprecated. We recommend that you use the AWS Cost and Usage﻿ Report instead.﻿ 11</summary></entry><entry><title type="html">Facts and fallacies of software engineering</title><link href="http://github.com/oshanz/til/til/2018/07/15/Facts-and-Fallacies-of-Software-Engineering.html" rel="alternate" type="text/html" title="Facts and fallacies of software engineering" /><published>2018-07-15T00:00:00+05:30</published><updated>2018-07-15T00:00:00+05:30</updated><id>http://github.com/oshanz/til/til/2018/07/15/Facts%20and%20Fallacies%20of%20Software%20Engineering</id><content type="html" xml:base="http://github.com/oshanz/til/til/2018/07/15/Facts-and-Fallacies-of-Software-Engineering.html">&lt;ul&gt;
  &lt;li&gt;Most of our estimates are more like wishes than realistic targets.&lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;There is almost always a price to be paid for working toward an unrealistic deadline. That price is most often paid in human terms (reputation, morale, and health, among others), but - as you can see in this story - there is likely a financial price to be paid as well.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;Screwed together components would be a wonderful way to build software. So would automatic generation of code from a requirements specification. And neither of those, in my view, is ever likely to happen in any meaningful way.&lt;/li&gt;
  &lt;li&gt;Someone building a reusable component is thinking of a particular problem to be solved and trying to determine whether there is some more general problem analogous to this specific one.&lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Reusable component needs to be generalized: it is not enough to show that it solves your problem at hand. It must solve some related problems, problems that may not have been so clearly in mind when the component was being developed.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;The most important factor in software work is not the tools and techniques used by the programmers, but rather the quality of the programmers themselves.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;Learning a new tool or technique actually lowers programmer productivity and product quality initially. The eventual benefit is achieved only after this learning curve is overcome. Therefore, it is worth adopting new tools and techniques, but only if their value is seen realistically and if patience is used in measuring benefits.&lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Software developers talk a lot about tools. They evaluate quite a few, buy a fair number, and use practically none.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;Most software estimates are performed at the beginning of the life cycle. This makes sense until we realize that estimates are obtained before the requirements are defined and thus before the problem is understood. Estimation, therefore, usually occurs at the wrong time.&lt;/li&gt;
  &lt;li&gt;Most software estimates are made either by upper management or by marketing, not by the people who build the software or their managers. Estimation is, therefore, done by the wrong people.&lt;/li&gt;
  &lt;li&gt;Software estimates are rarely adjusted as the project succeeds. Thus those estimates done at the wrong time by the wrong people are usually not corrected.&lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Since estimates are so faulty, there is little reason to be concerned when software projects do not meet estimated targets. But everyone is concerned anyway.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;Requirements errors are the most expensive to fix when found during productioni but the cheapest to fix early in the development.&lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Missing requirements are the hardest requirements errors to correct.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;Software that a typical programmer believes to be thoroughly tested and has often had only about 55 to 60 percent of its logic paths executed. Using automated support, such as coverage analyzers, can raise that roughly 85 to 90 percent. It is nearly impossible to test software at the level of 100 percent of its logic paths.&lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Even if 100 percent test coverage were possible, that is not a sufficient criterion for testing. Roughly 35 percent of software defects emerge from missing logic paths, and another 40 percent from the execution of a unique combination of logic paths. They will not be caught by 100 percent coverage.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;Errors tend to cluster.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;*There are tradeoffs between size and time optimization. Often, improving one degrades the other.&lt;/p&gt;

&lt;p&gt;*You can’t manage whay you can’t measure.&lt;/p&gt;</content><author><name></name></author><summary type="html">Most of our estimates are more like wishes than realistic targets. There is almost always a price to be paid for working toward an unrealistic deadline. That price is most often paid in human terms (reputation, morale, and health, among others), but - as you can see in this story - there is likely a financial price to be paid as well.</summary></entry><entry><title type="html">Team building</title><link href="http://github.com/oshanz/til/til/2018/07/14/team-building.html" rel="alternate" type="text/html" title="Team building" /><published>2018-07-14T00:00:00+05:30</published><updated>2018-07-14T00:00:00+05:30</updated><id>http://github.com/oshanz/til/til/2018/07/14/team%20building</id><content type="html" xml:base="http://github.com/oshanz/til/til/2018/07/14/team-building.html">&lt;p&gt;Marcus Buckingham &amp;amp; Curt Coffman – First, Break All The Rules&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;The Measuring Stick – Gallup Study&lt;/p&gt;

    &lt;p&gt;Do I know what is expected of me at work?
  Do I have the materials and equipment I need to do my work right?
  At work, do I have the opportunity to do what I do best every day?
  In the last seven days, have I received recognition or praise for doing good work?
  Does my supervisor, or someone at work, seem to care about me as a person?
  Is there someone at work who encourages my development?
  At work, do my opinions seem to count?
  Does the mission/purpose of my company make me feel my job is important?
  Are my co-workers committed to doing quality work?
  Do I have a best friend at work?
  In the last six months, has someone at work talked to me about my progress?
  This last year, have I had opportunities at work to learn and grow?&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;Define the Right Outcomes&lt;/li&gt;
  &lt;li&gt;Focus on Strengths&lt;/li&gt;
  &lt;li&gt;Select for Talent&lt;/li&gt;
  &lt;li&gt;Find the Right Fit&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;how to measure team satisfaction&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;survay&lt;/li&gt;
  &lt;li&gt;git stats&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Measures help us improve&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;Customer satisfaction&lt;/li&gt;
  &lt;li&gt;Quality of end product or service&lt;/li&gt;
  &lt;li&gt;Work processes&lt;/li&gt;
  &lt;li&gt;Costs&lt;/li&gt;
  &lt;li&gt;Productivity&lt;/li&gt;
  &lt;li&gt;Team Effectiveness&lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Individual Performance&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;feel like we are not trusted&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;Celebrations at team,organization level&lt;/li&gt;
  &lt;li&gt;Profit sharing&lt;/li&gt;
  &lt;li&gt;Informal pats on the back&lt;/li&gt;
  &lt;li&gt;Tangible,Financial rewards to individuals, teams&lt;/li&gt;
  &lt;li&gt;Public recognition/reward ceremonies&lt;/li&gt;
  &lt;li&gt;Gain sharing&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;https://news.gallup.com/home.aspx?g_source=logo
https://getlighthouse.com/blog/&lt;/p&gt;

&lt;p&gt;Employee engagement
https://news.gallup.com/businessjournal/208487/right-culture-not-employee-happiness.aspx&lt;/p&gt;

&lt;p&gt;» Employee Engagement: the degree to which employees feel committed to their company, which influences the e ort they put into their work.6
» Employee Experience: the way employees perceive the sum of their interactions with their employer, over the course of their employment. A great employee experience helps increase employee engagement.
» Employee Life Cycle: the stages employees go through as they progress through their career with a particular company.7 The employee life cycle forms the basis of the employee experience map.
» Employee Satisfaction: how happy employees are with their jobs.8&lt;/p&gt;

&lt;p&gt;Overall Satisfaction
Know What’s Expected
Materials and Equipment
Opportunity to Do Best
Recognition
Cares About Me
Development
Opinions Count
Mission/Purpose
Committed to Quality
Best Friend
Progress
Learn and Grow&lt;/p&gt;

&lt;p&gt;https://news.gallup.com/businessjournal/231566/why-friendships-among-remote-workers-crucial.aspx?g_source=link_NEWSV9&amp;amp;g_medium=&amp;amp;g_campaign=item_&amp;amp;g_content=Why%2520Friendships%2520Among%2520Remote%2520Workers%2520Are%2520Crucial&lt;/p&gt;

&lt;p&gt;Here’s how you can start to improve your team’s engagement:&lt;/p&gt;

&lt;p&gt;Begin to study your remote workers’ patterns. When are they meeting via video conference or able to connect with peers to collaborate together?
Look for opportunities to get remote employees together for events, even if this means using technology.
Understand your remote workers’ strengths and their natural talents to appreciate who they are and how they work best.
Spend time understanding what type of friendships your employees are looking to make. With their talents in mind, this gives you the clues and insights to match up complementary partnerships.
Encourage your remote employees to share stories about themselves.
Plan time to socialize with your remote employees when it will not disrupt their work or customers.
Make an effort to hear your remote employees’ thoughts and opinions at the end of each milestone on a project or task, as if they were in the office.
Ask yourself daily, “From what I learned and communicated today – of those working remotely, who needs to know those things or needs a check-in?”&lt;/p&gt;

&lt;p&gt;Velocity: When we track velocity, we are expressing how much effort (story points) a scrum team can get to “done” during a sprint. With velocity, the trend is more important than any individual measurement. As the trend stabilizes, teams can forecast their product backlog. Release planning also becomes easier for the product owner.
Defect Density: The number of bugs discovered during a sprint. This measurement is a call back to the scrum team’s commitment to quality. The lower the number of bugs the better. Again, the trend is important. An increasing number of bugs sprint-over-sprint could mean that the team is taking on too much work. A downward trend could point to changes in the definition of done improving quality.
Customer Satisfaction: How happy is your customer? The simplest method I’ve used is a simple web application that asked customers how they feel about the current sprint. They could select a smiley face, a frown face, or a neutral face. If a customer picked a frown face they were asked to provide additional comments. The goal is measure satisfaction over time and to also address negative feedback quickly.
Team Satisfaction: Is your team happy? This is a measurement that could be gathered at the end of each sprint retrospective. The measurement could be the results of a “fist of five” question, or it could be a survey similar to the customer satisfaction metric. Scrum teams should keep an eye on this trend and use the “5 Why’s” and other techniques to get to the root cause of whichever way the trend is going.
Value Per Sprint: This metric measures how much value the scrum team is delivering back to the customer/business/organization. One of the components of a story card is value. Scrum teams can use this value and measure a trend. The product owner could also provide a value in dollars that represents the impact of the sprint. A downward trend in this metric could indicate that lower value features are being implemented and that it is time to stop development on the product.&lt;/p&gt;

&lt;p&gt;5 Factors Leaders Should Focus on to Reduce Burnout&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;Unfair treatment at work&lt;/li&gt;
  &lt;li&gt;Unmanageable workload&lt;/li&gt;
  &lt;li&gt;Lack of role clarity&lt;/li&gt;
  &lt;li&gt;Lack of communication and support from manager&lt;/li&gt;
  &lt;li&gt;Unreasonable time pressure&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;How Managers Can Prevent Burnout&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;Listen to work-related problems.&lt;/li&gt;
  &lt;li&gt;Encourage teamwork.&lt;/li&gt;
  &lt;li&gt;Make everyone’s opinion count.&lt;/li&gt;
  &lt;li&gt;Make work purposeful.&lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Focus on strengths-based feedback and development.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;Place performance expectations and metrics within employees’ control.&lt;/li&gt;
  &lt;li&gt;Reduce noise and interruptions.&lt;/li&gt;
  &lt;li&gt;Design jobs to allow for autonomy.&lt;/li&gt;
  &lt;li&gt;Audit your workspace lighting.&lt;/li&gt;
  &lt;li&gt;Provide collaboration spaces that are inviting.&lt;/li&gt;
&lt;/ol&gt;</content><author><name></name></author><summary type="html">Marcus Buckingham &amp;amp; Curt Coffman – First, Break All The Rules</summary></entry><entry><title type="html">Conceptual blockbusting</title><link href="http://github.com/oshanz/til/til/2018/07/14/Conceptual-Blockbusting.html" rel="alternate" type="text/html" title="Conceptual blockbusting" /><published>2018-07-14T00:00:00+05:30</published><updated>2018-07-14T00:00:00+05:30</updated><id>http://github.com/oshanz/til/til/2018/07/14/Conceptual%20Blockbusting</id><content type="html" xml:base="http://github.com/oshanz/til/til/2018/07/14/Conceptual-Blockbusting.html">&lt;p&gt;Perceptual blocks
            Detecting what you expect – stereotyping
            Difficulty in isolating the problem
            Tendency to delimit the problem area poorly
            Inability to see the problem from various viewpoints
            Saturation
            Failure to utilize all sensory inputs
Emotional Blocks
             Emotion
             Freud
             The Humanistic Psychologists
             Fear of taking a risk
             No appetite for chaos
            Judging rather than generating ideas
            Inability or unwillingness to incubate
            Lack of challenge versus excessive zeal
            Reality and fantasy         &lt;br /&gt;
            Of flow and angst
Cultural and environmental blocks
            Taboos
            Fantasy and reflection are a waste of time, lazy, even crazy
            Playfulness is for children only
            Problem solving is a serious business and humor is out of place
            Reason, logic, numbers, utility, practicality are good: feeling,  intuition,   qualitative                judgements, pleasure, are bad.
            Any problem can be solved by scientific thinking and lots of money
            Everyone should be like me
            Cyber is better
            Tradition is preferable to change
            Distractions – phone, easy intrusion
            Lack of cooperation and trust among colleagues
            Autocratic boss who values only his/her own ideas: does not reward others
            Lack of support to bring ideas into action
Intellectual and expressive blocks
            Solving the problem using an incorrect language (verbal, mathematical, visual)—as in
            tryingto solve a problem mathematically when it can more easily be accomplished
            visually.
            Inflexible or inadequate use of intellectual problem-solving strategies
            Lack of, or incorrect information
            Inadequate language skill to express and record ideas (verbally,  musically, visually, etc.)
Alternate thinking languages
           Visual Thinking
           Other sensory languages
           Cognitive diversity
           The problem of specialization
           Analysis- synthesis
           Convergence-divergence
           Deduction-induction
          Jung and the Myers Briggs test
Kinds of blockbusters
          A questioning attitude
         Working on the right problem
         Time and effort focussers
         Set breakers
        Using other people’s ideas
        Crossing disciplines
        Crossing cultures and changing environments
        Unconscious blockbusting
        Maslow
        Barron
        Other paths for freeing the unconscious
Groups
        Inadequate knowledge of the creative process and the use of group creativity   techniques.    &lt;br /&gt;
        Poor understanding of the roles of affiliation and ego needs
        Poor leadership
        Inadequate or unbalanced group membership
       Lack of proper support
Organizations
       Too much or too little control
       Age and size
       Tradition and past success
       Inappropriate reward system and support
       Inhibitive culture&lt;/p&gt;</content><author><name></name></author><summary type="html">Perceptual blocks Detecting what you expect – stereotyping Difficulty in isolating the problem Tendency to delimit the problem area poorly Inability to see the problem from various viewpoints Saturation Failure to utilize all sensory inputs Emotional Blocks Emotion Freud The Humanistic Psychologists Fear of taking a risk No appetite for chaos Judging rather than generating ideas Inability or unwillingness to incubate Lack of challenge versus excessive zeal Reality and fantasy Of flow and angst Cultural and environmental blocks Taboos Fantasy and reflection are a waste of time, lazy, even crazy Playfulness is for children only Problem solving is a serious business and humor is out of place Reason, logic, numbers, utility, practicality are good: feeling, intuition, qualitative judgements, pleasure, are bad. Any problem can be solved by scientific thinking and lots of money Everyone should be like me Cyber is better Tradition is preferable to change Distractions – phone, easy intrusion Lack of cooperation and trust among colleagues Autocratic boss who values only his/her own ideas: does not reward others Lack of support to bring ideas into action Intellectual and expressive blocks Solving the problem using an incorrect language (verbal, mathematical, visual)—as in tryingto solve a problem mathematically when it can more easily be accomplished visually. Inflexible or inadequate use of intellectual problem-solving strategies Lack of, or incorrect information Inadequate language skill to express and record ideas (verbally, musically, visually, etc.) Alternate thinking languages Visual Thinking Other sensory languages Cognitive diversity The problem of specialization Analysis- synthesis Convergence-divergence Deduction-induction Jung and the Myers Briggs test Kinds of blockbusters A questioning attitude Working on the right problem Time and effort focussers Set breakers Using other people’s ideas Crossing disciplines Crossing cultures and changing environments Unconscious blockbusting Maslow Barron Other paths for freeing the unconscious Groups Inadequate knowledge of the creative process and the use of group creativity techniques. Poor understanding of the roles of affiliation and ego needs Poor leadership Inadequate or unbalanced group membership Lack of proper support Organizations Too much or too little control Age and size Tradition and past success Inappropriate reward system and support Inhibitive culture</summary></entry><entry><title type="html">Kpis for web application you can&amp;#8217;t manage whay you can&amp;#8217;t measure</title><link href="http://github.com/oshanz/til/til/2018/07/13/KPIs-for-Web-application-You-can't-manage-whay-you-can't-measure.html" rel="alternate" type="text/html" title="Kpis for web application   you can't manage whay you can't measure" /><published>2018-07-13T00:00:00+05:30</published><updated>2018-07-13T00:00:00+05:30</updated><id>http://github.com/oshanz/til/til/2018/07/13/KPIs%20for%20Web%20application%20-%20You%20can't%20manage%20whay%20you%20can't%20measure</id><content type="html" xml:base="http://github.com/oshanz/til/til/2018/07/13/KPIs-for-Web-application-You-can't-manage-whay-you-can't-measure.html">&lt;ol&gt;
  &lt;li&gt;User Satisfaction/Apdex Score&lt;/li&gt;
  &lt;li&gt;averages suck but people like it&lt;/li&gt;
  &lt;li&gt;Error Rate
  HTTP Error % – Number of web requests that ended in an error.
  Logged Exceptions – Number of unhandled and logged errors from your application.
  Thrown Exceptions – Number of all exceptions that have been thrown.&lt;/li&gt;
  &lt;li&gt;scale matrix (instanses)&lt;/li&gt;
  &lt;li&gt;request rate, number of concurrent users&lt;/li&gt;
  &lt;li&gt;server,application cpu&lt;/li&gt;
  &lt;li&gt;Application Availability&lt;/li&gt;
  &lt;li&gt;GC&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;Seven Attributes for Quality Software&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;Portability: is about creating a software product that is easily moved to another platform.
Reliability: is about a software product that does what is's supposed to do, dependably.
Efficiency: is about software product that economizes on both running and space consumption.
Usability: is about a software product that is easy and comfortable to use.
Testability: is about a software product that is easy to test.
Understandability: is about a software product that is easy for maintainer to comprehend.
Modifiability: is about a software product that is easy for a maintainer to change.
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;</content><author><name></name></author><summary type="html">User Satisfaction/Apdex Score averages suck but people like it Error Rate HTTP Error % – Number of web requests that ended in an error. Logged Exceptions – Number of unhandled and logged errors from your application. Thrown Exceptions – Number of all exceptions that have been thrown. scale matrix (instanses) request rate, number of concurrent users server,application cpu Application Availability GC</summary></entry><entry><title type="html">Awesome Product Engineering</title><link href="http://github.com/oshanz/til/til/2018/06/13/awesome-product-engineering.html" rel="alternate" type="text/html" title="Awesome Product Engineering" /><published>2018-06-13T00:00:00+05:30</published><updated>2018-06-13T00:00:00+05:30</updated><id>http://github.com/oshanz/til/til/2018/06/13/awesome-product-engineering</id><content type="html" xml:base="http://github.com/oshanz/til/til/2018/06/13/awesome-product-engineering.html">&lt;p&gt;https://github.com/teoga/awesome-product-design
http://brainmates.com.au/industry-links/software-tools-for-product-managers/
https://github.com/Zemanta/engineering-at-zemanta
https://github.com/davidsonfellipe/awesome-wpo
https://github.com/mmcgrana/services-engineering&lt;/p&gt;

&lt;p&gt;https://github.com/bayandin/awesome-awesomeness
https://github.com/sbilly/awesome-security
https://github.com/KrishMunot/awesome-startup&lt;/p&gt;

&lt;p&gt;Steve Blank: “You’re selling the vision and delivering the minimum feature set to visionaries, not everyone.”[9]&lt;/p&gt;

&lt;p&gt;Marketing
Releasing and assessing the impact of a minimum viable product is a market testing strategy that is used to screen product ideas soon after their generation. The release is facilitated by rapid application development tools and languages common to web application development.&lt;/p&gt;

&lt;p&gt;The MVP differs from the conventional market testing strategy of investing time and money early to implement a product before testing it in the market. The MVP is intended to ensure that the market wants the product before a large time and monetary investments are made. The MVP differs from the open source methodology of release early, release often that listens to users, letting them define the features and future of the product. The MVP starts with a product vision, which is maintained throughout the product life cycle, although it is adapted based on the explicit and implicit (indirect measures) feedback from potential future customers of the product.[2]&lt;/p&gt;

&lt;p&gt;The MVP is a strategy that may be used as a part of Blank’s customer development methodology that focuses on continual product iteration and refinement based on customer feedback. Additionally, the presentation of non-existing products and features may be refined using web-based statistical hypothesis testing, such as A/B testing.&lt;/p&gt;

&lt;p&gt;The general method of deploy first, code later is akin to the agile program code testing methodology called test-driven development where unit tests are written before and fail until the code is written.&lt;/p&gt;

&lt;p&gt;Minimum viable product
Continuous deployment (only for software development)
Split testing&lt;/p&gt;

&lt;p&gt;Actionable metrics
Actionable metrics can lead to informed business decisions and subsequent action.[7][24] These are in contrast to vanity metrics—measurements that give “the rosiest picture possible” but do not accurately reflect the key drivers of a business.&lt;/p&gt;

&lt;p&gt;Vanity metrics for one company may be actionable metrics for another. For example, a company specializing in creating web based dashboards for financial markets might view the number of web page views[20] per person as a vanity metric as their revenue is not based on number of page views. However, an online magazine with advertising would view web page views as a key metric as page views are directly correlated to revenue.&lt;/p&gt;

&lt;p&gt;A typical example of a vanity metric is “the number of new users gained per day”. While a high number of users gained per day seems beneficial to any company, if the cost of acquiring each user through expensive advertising campaigns is significantly higher than the revenue gained per user, then gaining more users could quickly lead to bankruptcy.&lt;/p&gt;

&lt;p&gt;Pivot
A pivot is a “structured course correction designed to test a new fundamental hypothesis about the product, strategy, and engine of growth.”[7] A notable example of a company employing the pivot is Groupon; when the company first started, it was an online activism platform called The Point.[1] After receiving almost no traction, the founders opened a WordPress blog and launched their first coupon promotion for a pizzeria located in their building lobby.[1] Although they only received 20 redemptions, the founders realized that their idea was significant, and had successfully empowered people to coordinate group action.[1] Three years later, Groupon would grow into a billion dollar business.&lt;/p&gt;

&lt;p&gt;Steve Blank defines a pivot as “changing (or even firing) the plan instead of the executive (the sales exec, marketing or even the CEO).”[25][26]&lt;/p&gt;

&lt;p&gt;Innovation accounting
This topic focuses on how entrepreneurs can maintain accountability and maximize outcomes by measuring progress, planning milestones, and prioritizing.[27]&lt;/p&gt;

&lt;p&gt;Build-Measure-Learn
The Build–Measure–Learn loop emphasizes speed as a critical ingredient to product development. A team or company’s effectiveness is determined by its ability to ideate, quickly build a minimum viable product of that idea, measure its effectiveness in the market, and learn from that experiment. In other words, it’s a learning cycle of turning ideas into products, measuring customers’ reactions and behaviors against built products, and then deciding whether to persevere or pivot the idea; this process repeats as many times as necessary. The phases of the loop are: Ideas → Build → Product → Measure → Data → Learn.[28]&lt;/p&gt;

&lt;p&gt;This rapid iteration allows teams to discover a feasible path towards product/market fit, and to continue optimizing and refining the business model after reaching product/market fit.[28][29]&lt;/p&gt;

&lt;p&gt;CMMI
http://people.cs.ksu.edu/~dwyer/courses/748/resources/cmm-tr25/tr25.html&lt;/p&gt;

&lt;p&gt;ISO&lt;/p&gt;</content><author><name></name></author><summary type="html">https://github.com/teoga/awesome-product-design http://brainmates.com.au/industry-links/software-tools-for-product-managers/ https://github.com/Zemanta/engineering-at-zemanta https://github.com/davidsonfellipe/awesome-wpo https://github.com/mmcgrana/services-engineering</summary></entry><entry><title type="html">Eigenclass</title><link href="http://github.com/oshanz/til/til/2016/04/08/eigenclass.html" rel="alternate" type="text/html" title="Eigenclass" /><published>2016-04-08T00:00:00+05:30</published><updated>2016-04-08T00:00:00+05:30</updated><id>http://github.com/oshanz/til/til/2016/04/08/eigenclass</id><content type="html" xml:base="http://github.com/oshanz/til/til/2016/04/08/eigenclass.html">&lt;p&gt;http://www.integralist.co.uk/posts/eigenclass.html&lt;/p&gt;

&lt;p&gt;https://gist.github.com/Integralist/bb8760d11a03c88da151
1.When creating singleton methods (i.e. def self.foo) Ruby will create an anonymous class to hold these methods. The anonymous class then assumes the role of the object’s class and the original class is re-designated as the superclass of that anonymous class(Eigenclass).&lt;/p&gt;
&lt;ol&gt;
  &lt;li&gt;private is actually a method&lt;/li&gt;
  &lt;li&gt;private method only changes the visibility of instance methods&lt;/li&gt;
  &lt;li&gt;Class methods on the other hand are instance methods of the Eigenclass&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;class Test&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;def self.bar
	puts &quot;bar&quot;
end

def self.foo
	puts &quot;foo&quot;
end

private_class_method :foo, :bar
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;end&lt;/p&gt;

&lt;p&gt;Test.bar
Test.foo&lt;/p&gt;</content><author><name></name></author><summary type="html">http://www.integralist.co.uk/posts/eigenclass.html</summary></entry><entry><title type="html">Git</title><link href="http://github.com/oshanz/til/til/2016/04/05/git.html" rel="alternate" type="text/html" title="Git" /><published>2016-04-05T00:00:00+05:30</published><updated>2016-04-05T00:00:00+05:30</updated><id>http://github.com/oshanz/til/til/2016/04/05/git</id><content type="html" xml:base="http://github.com/oshanz/til/til/2016/04/05/git.html">&lt;p&gt;https://gist.github.com/jbenet/ee6c9ac48068889b0912&lt;/p&gt;

&lt;p&gt;http://nvie.com/posts/a-successful-git-branching-model/&lt;/p&gt;</content><author><name></name></author><summary type="html">https://gist.github.com/jbenet/ee6c9ac48068889b0912</summary></entry><entry><title type="html">Flamegraph</title><link href="http://github.com/oshanz/til/til/2016/04/05/FlameGraph.html" rel="alternate" type="text/html" title="Flamegraph" /><published>2016-04-05T00:00:00+05:30</published><updated>2016-04-05T00:00:00+05:30</updated><id>http://github.com/oshanz/til/til/2016/04/05/FlameGraph</id><content type="html" xml:base="http://github.com/oshanz/til/til/2016/04/05/FlameGraph.html">&lt;p&gt;https://github.com/brendangregg/FlameGraph
http://www.brendangregg.com/index.html&lt;/p&gt;</content><author><name></name></author><summary type="html">https://github.com/brendangregg/FlameGraph http://www.brendangregg.com/index.html</summary></entry></feed>